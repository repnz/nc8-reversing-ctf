0x17d 0xc4 jmp +6

0x17e 0x2a mov [r2], r2
0x17f 0x13 mov r0, -1
0x180 0x37 mov r1, [r3]

# 0x1bf
0x181 0x01 int 0x1
0x182 0xbf '┐'

# jump 0x1bf
0x183 0xee push [-2]
0x184 0xfe pop pc

# DECRYPTED STAGE2 string
0x185 0x44 add r1, r0
0x186 0x45 add r1, r1
0x187 0x43 add r0, r3
0x188 0x52 xor r0, r2
0x189 0x59 xor r2, r1
0x18a 0x50 xor r0, r0
0x18b 0x54 xor r1, r0
0x18c 0x45 add r1, r1
0x18d 0x44 add r1, r0
0x18e 0x20 mov [r0], r0
0x18f 0x53 xor r0, r3
0x190 0x54 xor r1, r0
0x191 0x41 add r0, r1
0x192 0x47 add r1, r3
0x193 0x45 add r1, r1
0x194 0x32 mov r0, [r2]
0x195 0x3a mov r2, [r2]
0x196 0x20 mov [r0], r0
0x197 0x46 add r1, r2
0x198 0x4c add r3, r0
0x199 0x41 add r0, r1
0x19a 0x47 add r1, r3
0x19b 0x2d mov [r3], r1
0x19c 0x33 mov r0, [r3]
0x19d 0x76 'v'
0x19e 0x65 'e'
0x19f 0x72 'r'
0x1a0 0x79 'y'
0x1a1 0x5f xor r3, r3
0x1a2 0x42 add r0, r2
0x1a3 0x30 mov r0, [r0]
0x1a4 0x35 mov r1, [r1]
0x1a5 0x35 mov r1, [r1]
0x1a6 0x5f xor r3, r3
0x1a7 0x31 mov r0, [r1]
0x1a8 0x33 mov r0, [r3]
0x1a9 0x76 'v'
0x1aa 0x65 'e'
0x1ab 0x6c 'l'
0x1ac 0x5f xor r3, r3
0x1ad 0x48 add r2, r0
0x1ae 0x34 mov r1, [r0]
0x1af 0x73 's'
0x1b0 0x5f xor r3, r3
0x1b1 0x33 mov r0, [r3]
0x1b2 0x5f xor r3, r3
0x1b3 0x73 's'
0x1b4 0x74 't'
0x1b5 0x34 mov r1, [r0]
0x1b6 0x67 'g'
0x1b7 0x65 'e'
0x1b8 0x0a int 0xa

# 0x34 length of string
0x1b9 0x00 int 0x0
0x1ba 0x34 mov r1, [r0]

# 0x185 decrypted stage2 str
0x1bb 0x01 int 0x1
0x1bc 0x85 'à'

# 0xeb (write)
0x1bd 0x00 int 0x0
0x1be 0xeb push [-5]


0x1bf 0xea push [-6] # len
0x1c0 0xeb push [-5] # str
0x1c1 0xec push [-4] # write
0x1c2 0xfe pop pc # write(decrypted stage2)

0x1c3 0xdf push sp
0x1c4 0xfb pop r11   # r11 = sp
0x1c5 0xe1 push [+3] # 0x1f8
0x1c6 0xff pop sp    # sp = 0x1f8
0x1c7 0xfe pop pc

# 0x1f8 value
0x1c8 0x01 int 0x1
0x1c9 0xf8 pop r8

>> save top into r10, jump to next function
0x1ca 0xfa pop r10   # pop first 
0x1cb 0xfe pop pc    # pop into pc

# jump to r10
0x1cc 0xda push r10  
0x1cd 0xfe pop pc

0x1ce 0xb7 '╖'
0x1cf 0xae jz -2

0x1d0 0x99 div r2, r1
0x1d1 0xce jmp -2

0x1d2 0xa6 jz +8
0x1d3 0x79 'y'

0x1d4 0x45 add r1, r1
0x1d5 0x08 int 0x8
0x1d6 0xfb pop r11
0x1d7 0x7f ''
0x1d8 0x73 's'
0x1d9 0x03 int 0x3
0x1da 0x57 xor r1, r3
0x1db 0x2c mov [r3], r0
0x1dc 0xcb jmp -5
0x1dd 0x7c '|'
0x1de 0x7a 'z'
0x1df 0x20 mov [r0], r0
0x1e0 0x69 'i'
0x1e1 0x1c mov r3, 0
0x1e2 0x19 mov r2, 1
0x1e3 0x2e mov [r3], r2
0x1e4 0x6e 'n'
0x1e5 0x1a mov r2, 2
0x1e6 0x7c '|'
0x1e7 0x3f mov r3, [r3]
0x1e8 0x79 'y'
0x1e9 0x1c mov r3, 0
0x1ea 0x7d '}'
0x1eb 0x65 'e'
0x1ec 0x2d mov [r3], r1
0x1ed 0x57 xor r1, r3
0x1ee 0x38 mov r2, [r0]
0x1ef 0xb1 '▒'
0x1f0 0x2d mov [r3], r1
0x1f1 0xb2 '▓'

0x1f2 0xd3 push r3
0x1f3 0x84 'ä'

0x1f4 0xc1 jmp +3
0x1f5 0xa7 jz +9


0x1f6 0x69 'i'
0x1f7 0x6f 'o'

# 0x1ca address
0x1f8 0x01 int 0x1
0x1f9 0xca jmp -6

# value is moved into r10 0x1ca
0x1fa 0x01 int 0x1
0x1fb 0xca jmp -6

# 0xb9
0x1fc 0x00 int 0x0
0x1fd 0xb9 '╣'

# buffer a
0x1fe 0x00 int 0x0
0x1ff 0x0c int 0xc

# length of the buffer (8)
0x200 0x00 int 0x0
0x201 0x08 int 0x8

# buffer b 0x104 -> changed
0x202 0x01 int 0x1
0x203 0x04 int 0x4

# length of b array (4) -> changed
0x204 0x00 int 0x0
0x205 0x04 int 0x4

# 0x1ca ()
0x206 0x01 int 0x1
0x207 0xca jmp -6

# some2()
0x208 0x00 int 0x0
0x209 0x94 div r1, r0


# 0xc, first param to some2() -> a
0x20a 0x00 int 0x0
0x20b 0x0c int 0xc

# 0x27a, sec param to some2() -> b
0x20c 0x02 int 0x2
0x20d 0x7a 'z'

# 0x8, third param to some2() -> len
0x20e 0x00 int 0x0
0x20f 0x08 int 0x8

# 1ca
0x210 0x01 int 0x1
0x211 0xca jmp -6

# 0x84
0x212 0x00 int 0x0
0x213 0x84 'ä'

# 0x1337
0x214 0x13 mov r0, -1
0x215 0x37 mov r1, [r3]

# 0x1ca
0x216 0x01 int 0x1
0x217 0xca jmp -6

# 0x8b
0x218 0x00 int 0x0
0x219 0x8b 'ï'

# 0x1ca
0x21a 0x01 int 0x1
0x21b 0xca jmp -6

# 0x1ca
0x21c 0x01 int 0x1
0x21d 0xca jmp -6

# 0x15b add decoding
0x21e 0x01 int 0x1
0x21f 0x5b xor r2, r3

# 0xfa
0x220 0x00 int 0x0
0x221 0xfa pop r10

# 0x04
0x222 0x00 int 0x0
0x223 0x04 int 0x4

# 0x282
0x224 0x02 int 0x2
0x225 0x82 'é'

# 0x04
0x226 0x00 int 0x0
0x227 0x04 int 0x4

# 0x1ca
0x228 0x01 int 0x1
0x229 0xca jmp -6

# 0x8c
0x22a 0x00 int 0x0
0x22b 0x8c 'î'

# 0x04
0x22c 0x00 int 0x0
0x22d 0x04 int 0x4

# 0x1337
0x22e 0x13 mov r0, -1
0x22f 0x37 mov r1, [r3]

# 0x69
0x230 0x00 int 0x0
0x231 0x69 'i'

# 0x1ce
0x232 0x01 int 0x1
0x233 0xce jmp -2

# 0x1ce
0x234 0x01 int 0x1
0x235 0xce jmp -2

# 0xb9
0x236 0x00 int 0x0
0x237 0xb9 '╣'

# 0x18
0x238 0x00 int 0x0
0x239 0x18 mov r2, 0

# 0x8
0x23a 0x00 int 0x0
0x23b 0x08 int 0x8

# 0x104
0x23c 0x01 int 0x1
0x23d 0x04 int 0x4

# 0x4
0x23e 0x00 int 0x0
0x23f 0x04 int 0x4

# 0x1ce
0x240 0x01 int 0x1
0x241 0xce jmp -2

0x94
0x242 0x00 int 0x0
0x243 0x94 div r1, r0


0x244 0x00 int 0x0




# part 2 solve:

xor_encrypt(a=0x100, a_length=0xf8, b=0x04, b_length=0x4)
check_eq(a=0x100, b=0xfa, length=0x04)

add_encrypt(a=0x17d, a_length=0xfd, b=0x8, b_length=4)
xor_encrypt(a=0xc, a_length=8, b=0x104, b_length=4)
check_eq(a=0xc, b=0x27a, length=8)

add_encrypt(a=0xfa, a_length=4, b=0x282, b_length=4)
xor_encrypt(a=0x100, a_length=0xf8, b=0x14, b_length=4)
check_eq(a=0x100, b=0xfa, length=4)

xor_encrypt(a=24, a_length=8, b=260, b_length=4)
check_eq(a=25, b=466, length=8)

